use std::str::FromStr;
use crate::ast::nodes::*;
use crate::ast::Span;

grammar;

pub Program: Box<Program> = {
	(Stmt)+ => Box::new(Program::new(<>)),
};

Stmt: Box<Stmt> = {
	ExprStmt,
	While,
	Block,
	For,
	If,
	Return,
	Continue,
	Break,
	StructDecl,
	FunctionDecl,
	TraitDecl,
	VarAssign,
	DerefAssign,
	StructAssign,
	StructMemberAssign,
	ArrayMemberAssign,
	TraitAssign,
};

ExprStmt : Box<Stmt> = {
	#[precedence(level="0")]
	<t:VarDecl> ";" => t,
	#[precedence(level="1")]
	<l:@L> <t:Expr> <r:@R> ";" => Box::new(Stmt::Expr{ expr: t, span: Span::new(l as u32, r as u32) }),
};

Atom: Box<Expr> = {
	Numeric,
	Strng,
	Flt,
	Chr,
	Bln,
	Iden,
	Index,
	Call,
	MemberAccess,
};

Bracketed : Box<Expr> = {
	"(" <t:Expr> ")" => t,
};

Expr: Box<Expr> = {
	#[precedence(level="0")]
	Bracketed => <>,
	Atom => <>,
	#[precedence(level="1")] #[assoc(side="left")]
	UnaryOp,
	#[precedence(level="2")] #[assoc(side="left")]
	BinaryOp,
};

Numeric: Box<Expr> = {
	<l:@L> <val:r"[0-9]+"> <r:@R> => Box::new(Expr::Numeric {
		val: FromStr::from_str(val).unwrap(),
		span: Span::new(l as u32, r as u32),
	}),
};

Strng: Box<Expr> = {
	<l:@L> <val:r#""[^"]*""#> <r:@R> => {
		let s = val.to_string();
		let s = s[1..s.len()-1].to_string();
		Box::new(Expr::Strng {
			val: s,
			span: Span::new(l as u32, r as u32),
		})
	},
};

Flt: Box<Expr> = {
	<l:@L> <val:r"[0-9]+\.[0-9]+"> <r:@R> => {
		let val = FromStr::from_str(val).unwrap();
		Box::new(Expr::Flt {
			val: val,
			span: Span::new(l as u32, r as u32),
		})
	},
};

Chr: Box<Expr> = {
	<l:@L> <val:r"'.'"> <r:@R> => Box::new(Expr::Chr {
		val: val.chars().nth(1).unwrap(),
		span: Span::new(l as u32, r as u32),
	}),
};

Bln: Box<Expr> = {
	"true" => Box::new(Expr::Bln{
		val: true,
		span: Span::new(0, 4),
	}),
	"false" => Box::new(Expr::Bln{
		val: false,
		span: Span::new(0, 5),
	}),
};

Iden: Box<Expr> = {
	<l:@L> <val:r"[a-zA-Z_][a-zA-Z0-9_]*"> <r:@L> => Box::new(Expr::Iden {
		val: val.to_string(),
		span: Span::new(l as u32, r as u32),
	}),
};

OpInp: Box<Expr> = {
	#[precedence(level="0")]
	Atom => <>,
	#[precedence(level="1")] #[assoc(side="left")]
	UnaryOp,
	#[precedence(level="2")] #[assoc(side="left")]
	Bracketed,
};

UnaryOp: Box<Expr> = {
	#[precedence(level="0")]
	<l:@L> "--" <expr:OpInp> <r:@R> => Box::new(Expr::UnaryOp {
		op: UnaryOp::Dec,
		expr: expr,
		span: Span::new(l as u32, r as u32),
	}),
	#[precedence(level="1")]
	<l:@L> "++" <expr:OpInp> <r:@R> => Box::new(Expr::UnaryOp {
		op: UnaryOp::Inc,
		expr: expr,
		span: Span::new(l as u32, r as u32),
	}),
	#[precedence(level="2")]
	<l:@L> "&" <expr:OpInp> <r:@R> => Box::new(Expr::UnaryOp {
		op: UnaryOp::Ref,
		expr: expr,
		span: Span::new(l as u32, r as u32),
	}),
	#[precedence(level="3")]
	<l:@L> "*" <expr:OpInp> <r:@R> => Box::new(Expr::UnaryOp {
		op: UnaryOp::Deref,
		expr: expr,
		span: Span::new(l as u32, r as u32),
	}),
	#[precedence(level="4")]
	<l:@L> "+" <expr:OpInp> <r:@R> => Box::new(Expr::UnaryOp {
		op: UnaryOp::Pos,
		expr: expr,
		span: Span::new(l as u32, r as u32),
	}),
	#[precedence(level="5")]
	<l:@L> "-" <expr:OpInp> <r:@R> => Box::new(Expr::UnaryOp {
		op: UnaryOp::Neg,
		expr: expr,
		span: Span::new(l as u32, r as u32),
	}),
	#[precedence(level="6")]
	<l:@L> "!" <expr:OpInp> <r:@R> => Box::new(Expr::UnaryOp {
		op: UnaryOp::Not,
		expr: expr,
		span: Span::new(l as u32, r as u32),
	}),
	#[precedence(level="7")]
	<l:@L> "~" <expr:OpInp> <r:@R> => Box::new(Expr::UnaryOp {
		op: UnaryOp::BitNot,
		expr: expr,
		span: Span::new(l as u32, r as u32),
	}),
};

BinaryOp: Box<Expr> = {
	#[precedence(level="0")]
	<ls:@L> <l:OpInp> "*" <r:Expr> <rs:@R> => Box::new(Expr::BinaryOp {
		op: BinaryOp::Mul,
		lhs: l,
		rhs: r,
		span: Span::new(ls as u32, rs as u32),
	}),
	#[precedence(level="1")] #[assoc(side="left")]
	<ls:@L> <l:OpInp> "/" <r:Expr> <rs:@R> => Box::new(Expr::BinaryOp {
		op: BinaryOp::Div,
		lhs: l,
		rhs: r,
		span: Span::new(ls as u32, rs as u32),
	}),
	#[precedence(level="2")] #[assoc(side="left")]
	<ls:@L> <l:OpInp> "%" <r:Expr> <rs:@R> => Box::new(Expr::BinaryOp {
		op: BinaryOp::Mod,
		lhs: l,
		rhs: r,
		span: Span::new(ls as u32, rs as u32),
	}),
	#[precedence(level="3")] #[assoc(side="left")]
	<ls:@L> <l:OpInp> "+" <r:Expr> <rs:@R> => Box::new(Expr::BinaryOp {
		op: BinaryOp::Add,
		lhs: l,
		rhs: r,
		span: Span::new(ls as u32, rs as u32),
	}),
	#[precedence(level="4")] #[assoc(side="left")]
	<ls:@L> <l:OpInp> "-" <r:Expr> <rs:@R> => Box::new(Expr::BinaryOp {
		op: BinaryOp::Sub,
		lhs: l,
		rhs: r,
		span: Span::new(ls as u32, rs as u32),
	}),
	#[precedence(level="5")] #[assoc(side="left")]
	<ls:@L> <l:OpInp> "<<" <r:Expr> <rs:@R> => Box::new(Expr::BinaryOp {
		op: BinaryOp::Shl,
		lhs: l,
		rhs: r,
		span: Span::new(ls as u32, rs as u32),
	}),
	#[precedence(level="6")] #[assoc(side="left")]
	<ls:@L> <l:OpInp> ">>" <r:Expr> <rs:@R> => Box::new(Expr::BinaryOp {
		op: BinaryOp::Shr,
		lhs: l,
		rhs: r,
		span: Span::new(ls as u32, rs as u32),
	}),
	#[precedence(level="7")] #[assoc(side="left")]
	<ls:@L> <l:OpInp> "<" <r:Expr> <rs:@R> => Box::new(Expr::BinaryOp {
		op: BinaryOp::Lt,
		lhs: l,
		rhs: r,
		span: Span::new(ls as u32, rs as u32),
	}),
	#[precedence(level="8")] #[assoc(side="left")]
	<ls:@L> <l:OpInp> "<=" <r:Expr> <rs:@R> => Box::new(Expr::BinaryOp {
		op: BinaryOp::Lte,
		lhs: l,
		rhs: r,
		span: Span::new(ls as u32, rs as u32),
	}),
	#[precedence(level="9")] #[assoc(side="left")]
	<ls:@L> <l:OpInp> ">" <r:Expr> <rs:@R> => Box::new(Expr::BinaryOp {
		op: BinaryOp::Gt,
		lhs: l,
		rhs: r,
		span: Span::new(ls as u32, rs as u32),
	}),
	#[precedence(level="10")] #[assoc(side="left")]
	<ls:@L> <l:OpInp> ">=" <r:Expr> <rs:@R> => Box::new(Expr::BinaryOp {
		op: BinaryOp::Gte,
		lhs: l,
		rhs: r,
		span: Span::new(ls as u32, rs as u32),
	}),
	#[precedence(level="11")] #[assoc(side="left")]
	<ls:@L> <l:OpInp> "==" <r:Expr> <rs:@R> => Box::new(Expr::BinaryOp {
		op: BinaryOp::Eq,
		lhs: l,
		rhs: r,
		span: Span::new(ls as u32, rs as u32),
	}),
	#[precedence(level="12")] #[assoc(side="left")]
	<ls:@L> <l:OpInp> "!=" <r:Expr> <rs:@R> => Box::new(Expr::BinaryOp {
		op: BinaryOp::Neq,
		lhs: l,
		rhs: r,
		span: Span::new(ls as u32, rs as u32),
	}),
	#[precedence(level="13")] #[assoc(side="left")]
	<ls:@L> <l:OpInp> "&" <r:Expr> <rs:@R> => Box::new(Expr::BinaryOp {
		op: BinaryOp::BitAnd,
		lhs: l,
		rhs: r,
		span: Span::new(ls as u32, rs as u32),
	}),
	#[precedence(level="14")] #[assoc(side="left")]
	<ls:@L> <l:OpInp> "^" <r:Expr> <rs:@R> => Box::new(Expr::BinaryOp {
		op: BinaryOp::BitXor,
		lhs: l,
		rhs: r,
		span: Span::new(ls as u32, rs as u32),
	}),
	#[precedence(level="15")] #[assoc(side="left")]
	<ls:@L> <l:OpInp> "|" <r:Expr> <rs:@R> => Box::new(Expr::BinaryOp {
		op: BinaryOp::BitOr,
		lhs: l,
		rhs: r,
		span: Span::new(ls as u32, rs as u32),
	}),
	#[precedence(level="16")] #[assoc(side="left")]
	<ls:@L> <l:OpInp> "&&" <r:Expr> <rs:@R> => Box::new(Expr::BinaryOp {
		op: BinaryOp::And,
		lhs: l,
		rhs: r,
		span: Span::new(ls as u32, rs as u32),
	}),
	#[precedence(level="17")] #[assoc(side="left")]
	<ls:@L> <l:OpInp> "||" <r:Expr> <rs:@R> => Box::new(Expr::BinaryOp {
		op: BinaryOp::Or,
		lhs: l,
		rhs: r,
		span: Span::new(ls as u32, rs as u32),
	}),
};

Call: Box<Expr> = {
	<ls:@L> <name:Iden> "(" ")" <rs:@R> => Box::new(Expr::Call {
		name: name,
		args: Vec::new(),
		generics: None,
		span: Span::new(ls as u32, rs as u32),
	}),
	<ls:@L> <name:Iden> "::<" <gens:Comma<Type>> ">" "(" ")" <rs:@R> => Box::new(Expr::Call {
		name: name,
		args: Vec::new(),
		generics: Some(gens),
		span: Span::new(ls as u32, rs as u32),
	}),
	<ls:@L> <name:Iden> "(" <args:Comma<Expr>> ")" <rs:@R> => Box::new(Expr::Call {
		name: name,
		args: args,
		generics: None,
		span: Span::new(ls as u32, rs as u32),
	}),
	<ls:@L> <name:Iden> "::<" <gens:Comma<Type>> ">" "(" <args:Comma<Expr>> ")" <rs:@R> => Box::new(Expr::Call {
		name: name,
		args: args,
		generics: Some(gens),
		span: Span::new(ls as u32, rs as u32),
	}),
};

Index: Box<Expr> = {
	<ls:@L> <name:Iden> <v:("[" <Expr> "]")+> <rs:@R> => Box::new(Expr::Index {
		name: name,
		indices: v,
		span: Span::new(ls as u32, rs as u32),
	}),
};

MemAccessOperands: Box<Expr> = {
    #[precedence(level="0")]
	Numeric,
	Strng,
	Flt,
	Chr,
	Bln,
	Iden,
	Index,
	Call,
};

MemberAccess: Box<Expr> = {
	<ls:@L> <name:MemAccessOperands> <v:("." <MemAccessOperands>)+> <rs:@R> => {
		let mut base = name;
		for m in v {
			base = Box::new(Expr::MemberAccess {
				name: base,
				member: m,
				span: Span::new(ls as u32, rs as u32),
			});
		}
		base
	},
};

ArrayExpr: Box<Expr> = {
	#[precedence(level="0")]
	<ls:@L> "[" <vals:Comma<Expr>> "]" <rs:@R> => Box::new(Expr::ArrayExpr {
		elements: vals,
		span: Span::new(ls as u32, rs as u32),
	}),
	#[precedence(level="1")] #[assoc(side="left")]
	<ls:@L> "[" <vals:Comma<ArrayExpr>> "]" <rs:@R> => Box::new(Expr::ArrayExpr {
		elements: vals,
		span: Span::new(ls as u32, rs as u32),
	}),
};

Type: Box<Type> = {
	BuilinType => Box::new(Type::Builtin(<>)),
	Pointer => <>,
	UserDefined => <>,
	Array => <>,
};

BuilinType: BuiltinType = {
	"i8" => BuiltinType::I8,
	"i16" => BuiltinType::I16,
	"i32" => BuiltinType::I32,
	"i64" => BuiltinType::I64,
	"u8" => BuiltinType::U8,
	"u16" => BuiltinType::U16,
	"u32" => BuiltinType::U32,
	"u64" => BuiltinType::U64,
	"f32" => BuiltinType::F32,
	"f64" => BuiltinType::F64,
	"void" => BuiltinType::Void,
	"chr" => BuiltinType::Chr,
	"bln" => BuiltinType::Bln,
	"str" => BuiltinType::Str,
};

Pointer: Box<Type> = {
	"ptr" <n:"*"+> <t:Type> => {
		let nr = n.len();
		let mut base = t;
		for _ in 0..nr {
			base = Box::new(Type::Pointer(base));
		}
		base
	}
};

Array: Box<Type> = {
	"[" <t:Type> ";" <s:Semicolon<r"[0-9]+">> "]" => Box::new(Type::Array {
		base: t,
		lengths: s.into_iter().map(|x| FromStr::from_str(x).unwrap()).collect::<Vec<_>>(),
	}),
};

Comma<T>: Vec<T> = {
    <mut v:(<T> ",")*> <e:T> => {
		v.push(e);
		v
    }
};

Semicolon<T>: Vec<T> = {
    <mut v:(<T> ";")*> <e:T> => {
		v.push(e);
		v
    }
};

UserDefined: Box<Type> = {
	<name:Iden> "<" <args:Comma<Type>> ">" => Box::new(Type::UserDefined {
		name: name,
		generic_args: Some(args),
	}),
	<name:Iden> => Box::new(Type::UserDefined {
		name: name,
		generic_args: None,
	}),
};

VarDecl: Box<Stmt> = {
	<ls:@L> <name:Iden> ":" <t:Type> "=" <val:Expr> <rs:@R> => Box::new(Stmt::VarDecl {
		name: name,
		ty: t,
		value: Some(val),
		span: Span::new(ls as u32, rs as u32),
	}),
	<ls:@L> <name:Iden> ":" <t:Type> <rs:@R> "=" <val:ArrayExpr> => Box::new(Stmt::VarDecl {
		name: name,
		ty: t,
		value: Some(val),
		span: Span::new(ls as u32, rs as u32),
	}),
	<ls:@L> <name:Iden> ":" <t:Type> <rs:@R> => Box::new(Stmt::VarDecl {
		name: name,
		ty: t,
		value: None,
		span: Span::new(ls as u32, rs as u32),
	}),
};

Block: Box<Stmt> = {
	"{" <stmts:Stmt*> "}" => Box::new(Stmt::add_block(stmts)),
};

While: Box<Stmt> = {
	<ls:@L> "while" "(" <cond:Expr> ")" <body:Stmt> <rs:@R> => Box::new(Stmt::While {
		cond: cond,
		body: body,
		span: Span::new(ls as u32, rs as u32),
	}),
};

For: Box<Stmt> = {
	<ls:@L> "for" "(" <init:Stmt> <cond:Expr> ";" <step:Stmt> ")" <body:Stmt> <rs:@R> => Box::new(Stmt::For {
		init: init,
		cond: cond,
		step: step,
		body: body,
		span: Span::new(ls as u32, rs as u32),
	}),
	<ls:@L> "for" "(" <init:Stmt> <cond:Expr> ")" <body:Stmt> <rs:@R> => Box::new(Stmt::For {
		init: init,
		cond: cond,
		step: Box::new(Stmt::Expr{ 
			expr : Box::new(Expr::Numeric{
				val: 1,
				span: Span::new(0, 0),
			}),
			span: Span::new(0, 0),
		}),
		body: body,
		span: Span::new(ls as u32, rs as u32),
	}),
	<ls:@L> "for" "(" <init:Stmt> ";" <step:Stmt> ")" <body:Stmt> <rs:@R> => Box::new(Stmt::For {
		init: init,
		cond: Box::new(Expr::Bln{
			val: true,
			span: Span::new(0, 0),
		}),
		step: step,
		body: body,
		span: Span::new(ls as u32, rs as u32),
	}),
	<ls:@L> "for" "(" <init:Stmt> ")" <body:Stmt> <rs:@R> => Box::new(Stmt::For {
		init: init,
		cond: Box::new(Expr::Bln{
			val: true,
			span: Span::new(0, 0),
		}),
		step: Box::new(Stmt::Expr{
			expr: Box::new(Expr::Numeric{
				val: 1,
				span: Span::new(0, 0),
			}),
			span: Span::new(0, 0),
		}),
		body: body,
		span: Span::new(ls as u32, rs as u32),
	}),
};

ValidIfTail: Box<Stmt> = {
	Block,
	<l:@L> <expr:Expr> <r:@R> ";" => Box::new(Stmt::Expr {
		expr: expr,
		span: Span::new(l as u32, r as u32),
	}),
	Return,
	Continue,
	Break,
};

If : Box<Stmt> = {
	<ls:@L> "if" "(" <cond:Expr> ")" <body:ValidIfTail> <rs:@R> => Box::new(Stmt::If {
		cond: cond,
		body: body,
		els: None,
		span: Span::new(ls as u32, rs as u32),
	}),
	<ls:@L> "if" "(" <cond:Expr> ")" <body:ValidIfTail> "else" <else_body:Stmt> <rs:@R> => Box::new(Stmt::If {
		cond: cond,
		body: body,
		els: Some(else_body),
		span: Span::new(ls as u32, rs as u32),
	}),
};

Return: Box<Stmt> = {
	"ret" <val:Expr?> ";" => Box::new(Stmt::Return(val)),
};

Continue: Box<Stmt> = {
	"cont" ";" => Box::new(Stmt::Continue),
};

Break: Box<Stmt> = {
	"brk" ";" => Box::new(Stmt::Break),
};

Plud<T>: Vec<T> = {
	<mut v:(<T> "+")*> <e:T> => {
		v.push(e);
		v
	}
};

GenericType: Box<GenericType> = {
	<name:Iden> => Box::new(GenericType::new(name, None)),
	<name:Iden> ":" <t:Plud<Type>> => Box::new(GenericType::new(name, Some(t))),
};

GenricDecl: Vec<Box<GenericType>> = {
    <Comma<GenericType>> => <>
};

StructDecl: Box<Stmt> = {
	<ls:@L> "struct" <name:Iden> "{" <fields:Comma<VarDecl>> "}" <rs:@R> => Box::new(Stmt::StructDecl {
		name: name,
		fields: fields,
		generics: None,
		span: Span::new(ls as u32, rs as u32),
	}),
	<ls:@L> "struct" <name:Iden> "<" <gens:GenricDecl> ">" "{" <fields:Comma<VarDecl>> "}" <rs:@R> => Box::new(Stmt::StructDecl {
		name: name,
		fields: fields,
		generics: Some(gens),
		span: Span::new(ls as u32, rs as u32),
	}),
};

FunctionDecl: Box<Stmt> = {
	<ls:@L> "fnc" <name:Iden> "(" ")" ":" <ret:Type> <body:Block> <rs:@R> => Box::new(Stmt::FunctionDecl {
		name: name,
		args: Vec::new(),
		ret: ret,
		body: Some(body),
		generics: None,
		isvararg: false,
		span: Span::new(ls as u32, rs as u32),
	}),
	<ls:@L> "fnc" <name:Iden> "<" <gens:GenricDecl> ">" "(" ")" ":" <ret:Type> <body:Block> <rs:@R> => Box::new(Stmt::FunctionDecl {
		name: name,
		args: Vec::new(),
		ret: ret,
		body: Some(body),
		generics: Some(gens),
		isvararg: false,
		span: Span::new(ls as u32, rs as u32),
	}),
	<ls:@L> "fnc" <name:Iden> "(" ")" ":" <ret:Type> ";" <rs:@R> => Box::new(Stmt::FunctionDecl {
		name: name,
		args: Vec::new(),
		ret: ret,
		body: None,
		generics: None,
		isvararg: false,
		span: Span::new(ls as u32, rs as u32),
	}),
	<ls:@L> "fnc" <name:Iden> "<" <gens:GenricDecl> ">" "(" ")" ":" <ret:Type> ";" <rs:@R> => Box::new(Stmt::FunctionDecl {
		name: name,
		args: Vec::new(),
		ret: ret,
		body: None,
		generics: Some(gens),
		isvararg: false,
		span: Span::new(ls as u32, rs as u32),
	}),
	// ---
	<ls:@L> "fnc" <name:Iden> "(" <args:Comma<VarDecl>> ")" ":" <ret:Type> <body:Block> <rs:@R> => Box::new(Stmt::FunctionDecl {
		name: name,
		args: args,
		ret: ret,
		body: Some(body),
		generics: None,
		isvararg: false,
		span: Span::new(ls as u32, rs as u32),
	}),
	<ls:@L> "fnc" <name:Iden> "<" <gens:GenricDecl> ">" "(" <args:Comma<VarDecl>> ")" ":" <ret:Type> <body:Block> <rs:@R> => Box::new(Stmt::FunctionDecl {
		name: name,
		args: args,
		ret: ret,
		body: Some(body),
		generics: Some(gens),
		isvararg: false,
		span: Span::new(ls as u32, rs as u32),
	}),
	<ls:@L> "fnc" <name:Iden> "<" <gens:GenricDecl> ">" "(" <args:Comma<VarDecl>> ", ..." ")" ":" <ret:Type> <body:Block> <rs:@R> => Box::new(Stmt::FunctionDecl {
		name: name,
		args: args,
		ret: ret,
		body: Some(body),
		generics: Some(gens),
		isvararg: true,
		span: Span::new(ls as u32, rs as u32),
	}),
	<ls:@L> "fnc" <name:Iden> "(" <args:Comma<VarDecl>> ", ..." ")" ":" <ret:Type> <body:Block> <rs:@R> => Box::new(Stmt::FunctionDecl {
		name: name,
		args: args,
		ret: ret,
		body: Some(body),
		generics: None,
		isvararg: true,
		span: Span::new(ls as u32, rs as u32),
	}),
	<ls:@L> "fnc" <name:Iden> "(" <args:Comma<VarDecl>> ")" ":" <ret:Type> ";" <rs:@R> => Box::new(Stmt::FunctionDecl {
		name: name,
		args: args,
		ret: ret,
		body: None,
		generics: None,
		isvararg: false,
		span: Span::new(ls as u32, rs as u32),
	}),
	<ls:@L> "fnc" <name:Iden> "<" <gens:GenricDecl> ">" "(" <args:Comma<VarDecl>> ")" ":" <ret:Type> ";" <rs:@R> => Box::new(Stmt::FunctionDecl {
		name: name,
		args: args,
		ret: ret,
		body: None,
		generics: Some(gens),
		isvararg: false,
		span: Span::new(ls as u32, rs as u32),
	}),
	<ls:@L> "fnc" <name:Iden> "(" <args:Comma<VarDecl>> ", ..." ")" ":" <ret:Type> ";" <rs:@R> => Box::new(Stmt::FunctionDecl {
		name: name,
		args: args,
		ret: ret,
		body: None,
		generics: None,
		isvararg: true,
		span: Span::new(ls as u32, rs as u32),
	}),
	<ls:@L> "fnc" <name:Iden> "<" <gens:GenricDecl> ">" "(" <args:Comma<VarDecl>> ", ..." ")" ":" <ret:Type> ";" <rs:@R> => Box::new(Stmt::FunctionDecl {
		name: name,
		args: args,
		ret: ret,
		body: None,
		generics: Some(gens),
		isvararg: true,
		span: Span::new(ls as u32, rs as u32),
	}),
};

TraitDecl: Box<Stmt> = {
	<ls:@L> "trait" <name:Iden> "{" <methods:(FunctionDecl)+> "}" <rs:@R> => Box::new(Stmt::TraitDecl {
		name: name,
		methods: methods,
		span: Span::new(ls as u32, rs as u32),
	}),
};

VarAssign: Box<Stmt> = {
	<ls:@L> <name:Iden> "=" <val:Expr> ";" <rs:@R> => Box::new(Stmt::VarAssign {
		name: name,
		value: val,
		op: AssignOp::Assign,
		span: Span::new(ls as u32, rs as u32),
	}),
	<ls:@L> <name:Iden> "+=" <val:Expr> ";" <rs:@R> => Box::new(Stmt::VarAssign {
		name: name,
		value: val,
		op: AssignOp::AddAssign,
		span: Span::new(ls as u32, rs as u32),
	}),
	<ls:@L> <name:Iden> "-=" <val:Expr> ";" <rs:@R> => Box::new(Stmt::VarAssign {
		name: name,
		value: val,
		op: AssignOp::SubAssign,
		span: Span::new(ls as u32, rs as u32),
	}),
	<ls:@L> <name:Iden> "*=" <val:Expr> ";" <rs:@R> => Box::new(Stmt::VarAssign {
		name: name,
		value: val,
		op: AssignOp::MulAssign,
		span: Span::new(ls as u32, rs as u32),
	}),
	<ls:@L> <name:Iden> "/=" <val:Expr> ";" <rs:@R> => Box::new(Stmt::VarAssign {
		name: name,
		value: val,
		op: AssignOp::DivAssign,
		span: Span::new(ls as u32, rs as u32),
	}),
	<ls:@L> <name:Iden> "%=" <val:Expr> ";" <rs:@R> => Box::new(Stmt::VarAssign {
		name: name,
		value: val,
		op: AssignOp::ModAssign,
		span: Span::new(ls as u32, rs as u32),
	}),
};

DerefAssign: Box<Stmt> = {
	<ls:@L> <val:UnaryOp> "=" <expr:Expr> ";" <rs:@R> => Box::new(Stmt::DerefAssign {
		value: val,
		expr: expr,
		op: AssignOp::Assign,
		span: Span::new(ls as u32, rs as u32),
	}),
	<ls:@L> <val:UnaryOp> "+=" <expr:Expr> ";" <rs:@R> => Box::new(Stmt::DerefAssign {
		value: val,
		expr: expr,
		op: AssignOp::AddAssign,
		span: Span::new(ls as u32, rs as u32),
	}),
	<ls:@L> <val:UnaryOp> "-=" <expr:Expr> ";" <rs:@R> => Box::new(Stmt::DerefAssign {
		value: val,
		expr: expr,
		op: AssignOp::SubAssign,
		span: Span::new(ls as u32, rs as u32),
	}),
	<ls:@L> <val:UnaryOp> "*=" <expr:Expr> ";" <rs:@R> => Box::new(Stmt::DerefAssign {
		value: val,
		expr: expr,
		op: AssignOp::MulAssign,
		span: Span::new(ls as u32, rs as u32),
	}),
	<ls:@L> <val:UnaryOp> "/=" <expr:Expr> ";" <rs:@R> => Box::new(Stmt::DerefAssign {
		value: val,
		expr: expr,
		op: AssignOp::DivAssign,
		span: Span::new(ls as u32, rs as u32),
	}),
	<ls:@L> <val:UnaryOp> "%=" <expr:Expr> ";" <rs:@R> => Box::new(Stmt::DerefAssign {
		value: val,
		expr: expr,
		op: AssignOp::ModAssign,
		span: Span::new(ls as u32, rs as u32),
	}),
};

NameVal: (Box<Expr>, Box<Stmt>) = {
	<name:Iden> "=" <val:Stmt> => (name, val),
};

StructAssign: Box<Stmt> = {
	<ls:@L> <name:Iden> "=" <sname:Iden> "{" <fields:Comma<NameVal>> "}" ";" <rs:@R> => Box::new(Stmt::StructAssign {
		name: name,
		sname: sname,
		fields: fields,
		span: Span::new(ls as u32, rs as u32),
	}),
};

StructMemberAssign: Box<Stmt> = {
	<ls:@L> <name:MemberAccess> "=" <val:Expr> ";" <rs:@R> => Box::new(Stmt::StructMemberAssign {
		name: name,
		value: val,
		op: AssignOp::Assign,
		span: Span::new(ls as u32, rs as u32),
	}),
	<ls:@L> <name:MemberAccess> "+=" <val:Expr> ";" <rs:@R> => Box::new(Stmt::StructMemberAssign {
		name: name,
		value: val,
		op: AssignOp::AddAssign,
		span: Span::new(ls as u32, rs as u32),
	}),
	<ls:@L> <name:MemberAccess> "-=" <val:Expr> ";" <rs:@R> => Box::new(Stmt::StructMemberAssign {
		name: name,
		value: val,
		op: AssignOp::SubAssign,
		span: Span::new(ls as u32, rs as u32),
	}),
	<ls:@L> <name:MemberAccess> "*=" <val:Expr> ";" <rs:@R> => Box::new(Stmt::StructMemberAssign {
		name: name,
		value: val,
		op: AssignOp::MulAssign,
		span: Span::new(ls as u32, rs as u32),
	}),
	<ls:@L> <name:MemberAccess> "/=" <val:Expr> ";" <rs:@R> => Box::new(Stmt::StructMemberAssign {
		name: name,
		value: val,
		op: AssignOp::DivAssign,
		span: Span::new(ls as u32, rs as u32),
	}),
	<ls:@L> <name:MemberAccess> "%=" <val:Expr> ";" <rs:@R> => Box::new(Stmt::StructMemberAssign {
		name: name,
		value: val,
		op: AssignOp::ModAssign,
		span: Span::new(ls as u32, rs as u32),
	}),
};

ArrayMemberAssign: Box<Stmt> = {
	<l:@L> <name:Index> "=" <value:Expr> ";" <r:@R> => Box::new(Stmt::ArrayMemberAssign {
		element: name,
		value: value,
		op: AssignOp::Assign,
		span: Span::new(l as u32, r as u32),
	}),
	<l:@L> <name:Index> "+=" <value:Expr> ";" <r:@R> => Box::new(Stmt::ArrayMemberAssign {
		element: name,
		value: value,
		op: AssignOp::AddAssign,
		span: Span::new(l as u32, r as u32),
	}),
	<l:@L> <name:Index> "-=" <value:Expr> ";" <r:@R> => Box::new(Stmt::ArrayMemberAssign {
		element: name,
		value: value,
		op: AssignOp::SubAssign,
		span: Span::new(l as u32, r as u32),
	}),
	<l:@L> <name:Index> "*=" <value:Expr> ";" <r:@R> => Box::new(Stmt::ArrayMemberAssign {
		element: name,
		value: value,
		op: AssignOp::MulAssign,
		span: Span::new(l as u32, r as u32),
	}),
	<l:@L> <name:Index> "/=" <value:Expr> ";" <r:@R> => Box::new(Stmt::ArrayMemberAssign {
		element: name,
		value: value,
		op: AssignOp::DivAssign,
		span: Span::new(l as u32, r as u32),
	}),
	<l:@L> <name:Index> "%=" <value:Expr> ";" <r:@R> => Box::new(Stmt::ArrayMemberAssign {
		element: name,
		value: value,
		op: AssignOp::ModAssign,
		span: Span::new(l as u32, r as u32),
	}),
};

TraitAssign: Box<Stmt> = {
	<ls:@L> "trait" <name:Iden> "for" <ty:Type> "{" <methods:(FunctionDecl)+> "}" <rs:@R> => Box::new(Stmt::TraitAssign {
		name: name,
		for_ty: ty,
		methods: methods,
		span: Span::new(ls as u32, rs as u32),
	}),
};
