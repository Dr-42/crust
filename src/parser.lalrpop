use std::str::FromStr;
use crate::ast::nodes::*;

grammar;

pub Program: Box<Program> = {
	(Stmt)+ => Box::new(Program::new(<>)),
};

Stmt: Box<Stmt> = {
	#[precedence(level="0")]
	<t:VarDecl> ";" => t,
	#[precedence(level="1")]
	<t:Expr> ";" => Box::new(Stmt::Expr(t)),
};

Atom: Box<Expr> = {
	Numeric => Box::new(Expr::Numeric(<>)),
	Strng => Box::new(Expr::Strng(<>)),
	Flt => Box::new(Expr::Flt(<>)),
	Chr => Box::new(Expr::Chr(<>)),
	Bln => Box::new(Expr::Bln(<>)),
	Iden => Box::new(Expr::Iden(<>)),
};

Expr: Box<Expr> = {
	#[precedence(level="0")]
	"(" <t:Expr> ")" => t,
	Atom => <>,
	#[precedence(level="1")] #[assoc(side="left")]
	UnaryOp,
	#[precedence(level="2")] #[assoc(side="left")]
	BinaryOp,
	Call,
};

Numeric: i64 = {
	r"[0-9]+" => FromStr::from_str(<>).unwrap(),
};

Strng: String = {
	r#""[^"]*""# => {
		let s = <>.to_string();
		s[1..s.len()-1].to_string()
	},
};

Flt: f64 = {
	r"[0-9]+\.[0-9]+" => FromStr::from_str(<>).unwrap(),
};

Chr: char = {
	r"'.'" => {
		let s = <>.to_string();
		s.chars().nth(1).unwrap()
	},
};

Bln: bool = {
	"true" => true,
	"false" => false,
};

Iden: String = {
	r"[a-zA-Z_][a-zA-Z0-9_]*" => <>.to_string(),
};

UnaryOp: Box<Expr> = {
	#[precedence(level="0")]
	"--" <expr:Atom> => Box::new(Expr::UnaryOp {
		op: UnaryOp::Dec,
		expr: expr,
	}),
	#[precedence(level="1")]
	"++" <expr:Atom> => Box::new(Expr::UnaryOp {
		op: UnaryOp::Inc,
		expr: expr,
	}),
	#[precedence(level="2")]
	"&" <expr:Atom> => Box::new(Expr::UnaryOp {
		op: UnaryOp::Ref,
		expr: expr,
	}),
	#[precedence(level="3")]
	"*" <expr:Atom> => Box::new(Expr::UnaryOp {
		op: UnaryOp::Deref,
		expr: expr,
	}),
	#[precedence(level="4")]
	"+" <expr:Atom> => Box::new(Expr::UnaryOp {
		op: UnaryOp::Pos,
		expr: expr,
	}),
	#[precedence(level="5")]
	"-" <expr:Atom> => Box::new(Expr::UnaryOp {
		op: UnaryOp::Neg,
		expr: expr,
	}),
	#[precedence(level="6")]
	"!" <expr:Atom> => Box::new(Expr::UnaryOp {
		op: UnaryOp::Not,
		expr: expr,
	}),
	#[precedence(level="7")]
	"~" <expr:Atom> => Box::new(Expr::UnaryOp {
		op: UnaryOp::BitNot,
		expr: expr,
	}),
};

BinInp: Box<Expr> = {
	#[precedence(level="0")]
	Atom => <>,
	#[precedence(level="1")] #[assoc(side="left")]
	UnaryOp,
};

BinaryOp: Box<Expr> = {
	#[precedence(level="0")]
	<l:BinInp> "*" <r:Expr> => Box::new(Expr::BinaryOp {
		op: BinaryOp::Mul,
		lhs: l,
		rhs: r,
	}),
	#[precedence(level="1")] #[assoc(side="left")]
	<l:BinInp> "/" <r:Expr> => Box::new(Expr::BinaryOp {
		op: BinaryOp::Div,
		lhs: l,
		rhs: r,
	}),
	#[precedence(level="2")] #[assoc(side="left")]
	<l:BinInp> "%" <r:Expr> => Box::new(Expr::BinaryOp {
		op: BinaryOp::Mod,
		lhs: l,
		rhs: r,
	}),
	#[precedence(level="3")] #[assoc(side="left")]
	<l:BinInp> "+" <r:Expr> => Box::new(Expr::BinaryOp {
		op: BinaryOp::Add,
		lhs: l,
		rhs: r,
	}),
	#[precedence(level="4")] #[assoc(side="left")]
	<l:BinInp> "-" <r:Expr> => Box::new(Expr::BinaryOp {
		op: BinaryOp::Sub,
		lhs: l,
		rhs: r,
	}),
	#[precedence(level="5")] #[assoc(side="left")]
	<l:BinInp> "<<" <r:Expr> => Box::new(Expr::BinaryOp {
		op: BinaryOp::Shl,
		lhs: l,
		rhs: r,
	}),
	#[precedence(level="6")] #[assoc(side="left")]
	<l:BinInp> ">>" <r:Expr> => Box::new(Expr::BinaryOp {
		op: BinaryOp::Shr,
		lhs: l,
		rhs: r,
	}),
	#[precedence(level="7")] #[assoc(side="left")]
	<l:BinInp> "<" <r:Expr> => Box::new(Expr::BinaryOp {
		op: BinaryOp::Lt,
		lhs: l,
		rhs: r,
	}),
	#[precedence(level="8")] #[assoc(side="left")]
	<l:BinInp> "<=" <r:Expr> => Box::new(Expr::BinaryOp {
		op: BinaryOp::Lte,
		lhs: l,
		rhs: r,
	}),
	#[precedence(level="9")] #[assoc(side="left")]
	<l:BinInp> ">" <r:Expr> => Box::new(Expr::BinaryOp {
		op: BinaryOp::Gt,
		lhs: l,
		rhs: r,
	}),
	#[precedence(level="10")] #[assoc(side="left")]
	<l:BinInp> ">=" <r:Expr> => Box::new(Expr::BinaryOp {
		op: BinaryOp::Gte,
		lhs: l,
		rhs: r,
	}),
	#[precedence(level="11")] #[assoc(side="left")]
	<l:BinInp> "==" <r:Expr> => Box::new(Expr::BinaryOp {
		op: BinaryOp::Eq,
		lhs: l,
		rhs: r,
	}),
	#[precedence(level="12")] #[assoc(side="left")]
	<l:BinInp> "!=" <r:Expr> => Box::new(Expr::BinaryOp {
		op: BinaryOp::Neq,
		lhs: l,
		rhs: r,
	}),
	#[precedence(level="13")] #[assoc(side="left")]
	<l:BinInp> "&" <r:Expr> => Box::new(Expr::BinaryOp {
		op: BinaryOp::BitAnd,
		lhs: l,
		rhs: r,
	}),
	#[precedence(level="14")] #[assoc(side="left")]
	<l:BinInp> "^" <r:Expr> => Box::new(Expr::BinaryOp {
		op: BinaryOp::BitXor,
		lhs: l,
		rhs: r,
	}),
	#[precedence(level="15")] #[assoc(side="left")]
	<l:BinInp> "|" <r:Expr> => Box::new(Expr::BinaryOp {
		op: BinaryOp::BitOr,
		lhs: l,
		rhs: r,
	}),
	#[precedence(level="16")] #[assoc(side="left")]
	<l:BinInp> "&&" <r:Expr> => Box::new(Expr::BinaryOp {
		op: BinaryOp::And,
		lhs: l,
		rhs: r,
	}),
	#[precedence(level="17")] #[assoc(side="left")]
	<l:BinInp> "||" <r:Expr> => Box::new(Expr::BinaryOp {
		op: BinaryOp::Or,
		lhs: l,
		rhs: r,
	}),
};

Call: Box<Expr> = {
	<name:Iden> "(" <args:Comma<Expr>> ")" => Box::new(Expr::Call {
		name: name,
		args: args,
		generics: None,
	}),
	<name:Iden> "gen<" <gens:Comma<Type>> ">" "(" <args:Comma<Expr>> ")" => Box::new(Expr::Call {
		name: name,
		args: args,
		generics: Some(gens),
	}),
};

Type: Box<Type> = {
	BuilinType => Box::new(Type::Builtin(<>)),
	Pointer => <>,
	UserDefined => <>,
	Array => <>,
};

BuilinType: BuiltinType = {
	"i8" => BuiltinType::I8,
	"i16" => BuiltinType::I16,
	"i32" => BuiltinType::I32,
	"i64" => BuiltinType::I64,
	"u8" => BuiltinType::U8,
	"u16" => BuiltinType::U16,
	"u32" => BuiltinType::U32,
	"u64" => BuiltinType::U64,
	"f32" => BuiltinType::F32,
	"f64" => BuiltinType::F64,
	"void" => BuiltinType::Void,
	"chr" => BuiltinType::Chr,
	"bln" => BuiltinType::Bln,
	"str" => BuiltinType::Str,
};

Pointer: Box<Type> = {
	"ptr" <n:"*"+> <t:Type> => {
		let nr = n.len();
		let mut base = t;
		for _ in 0..nr {
			base = Box::new(Type::Pointer(base));
		}
		base
	}
};

Array: Box<Type> = {
	"[" <t:Type> ";" <s:r"[0-9]+"> "]" => Box::new(Type::Array {
		base: t,
		length: s.parse().unwrap(),
	}),
};

Comma<T>: Vec<T> = {
    <mut v:(<T> ",")*> <e:T?> => match e { // (2)
        None => v,
        Some(e) => {
            v.push(e);
            v
        }
    }
};

UserDefined: Box<Type> = {
	<name:Iden> "<" <args:Comma<Type>> ">" => Box::new(Type::UserDefined {
		name: name,
		generic_args: Some(args),
	}),
	<name:Iden> => Box::new(Type::UserDefined {
		name: name,
		generic_args: None,
	}),
};

VarDecl: Box<Stmt> = {
	<name:Iden> ":" <t:Type> "=" <val:Expr> => Box::new(Stmt::VarDecl {
		name: name,
		ty: t,
		value: Some(val),
	}),
	<name:Iden> ":" <t:Type> => Box::new(Stmt::VarDecl {
		name: name,
		ty: t,
		value: None,
	}),
};
